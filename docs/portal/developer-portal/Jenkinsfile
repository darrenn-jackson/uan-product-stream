@Library('dst-shared@master') _

//Possible Parameters Include
// * executeScript         Name of script which creates .tar file
// * executeScript2        Name of script which creates CLI .md files
// * dockerfile            Path to the Docker file relative to the repository root.  Default Dockerfile
// * dockerBuildContextDir The build context directory for Docker builds.  Default to '.' i.e. workspace root
// * dockerArguments       Additional arguments to pass to the build of the Docker application
// * dockerBuildTarget     Target to build when building the Docker application. Defaults to unset
// * masterBranch          Branch to consider as master, only this branch will receive the latest tag.  Default master
// * repository            Docker repository name to use
// * imagePrefix           Docker image name prefix
// * name                  Name of the Docker image used to add metadata to the image
// * description           Description of the Docker image used to add metadata to the image
// * slackNotification     Array: ["<slack_channel>", "<jenkins_credential_id", <notify_on_start>, <notify_on_success>, <notify_on_failure>, <notify_on_fixed>]]
// * product               String: set product for the transfer function
// * targetOS              String: set targetOS for the transfer function

// Jenkins library for building docker files
// Copyright 2021-2022 Hewlett Packard Enterprise Development LP. All third-party marks are the property of their respective owners.


def pipelineParams= [
    makeMakefile: "hpc-shastadocs-docs-as-code/portal/developer-portal/Makefile",
    dockerfileSpell: "hpc-shastadocs-docs-as-code/Dockerfile.spellcheck",
    repository: "cray",
    imagePrefix: "uan-docs",
    name: "uan-docs",
    description: "DITA-OT",
    masterBranch: 'master',
    dockerBuildContextDir: '.',
    dockerArguments: "",
    dockerBuildTarget: "application",
    useEntryPointForTest: true,
    slackNotification: ["", "", true, true, true, true],
    product: "pubs",
    targetOS: "noos",
]

//Testing groovy file, testing realProperties method
// def testvar = load ".envvars/test.groovy"
def loadEnvironmentVariables(path){
    def props = readProperties  file: path
    keys= props.keySet()
    for(key in keys) {
        value = props["${key}"]
        env."${key}" = "${value}"
    }
}

// load from here?  This does NOT work.
// loadEnvironmentVariables('.envvars/test.groovy')

// Build date
buildDate = new Date().format( 'yyyyMMddHHmmss' )

// UUID distinquishes base containers
def containerId_sq = UUID.randomUUID().toString()

// Container Used for spellcheck.
def containerId_toss = UUID.randomUUID().toString()

// Variable to check whether to skip the 'success' post section
def skipSuccess = false

// Variable to decide whether to skip the slackNotify steps if the plugin isn't installed
def skipSlack = slackNotify(exceptionCatch: true)

// Slack notification of starting the Jenkins job if enabled
if ((pipelineParams.slackNotification[2] != false && skipSlack != true)) {
    slackNotify(channel: "${pipelineParams.slackNotification[0]}", credential: "${pipelineParams.slackNotification[1]}", color: "good", message: "Starting: ${env.JOB_NAME} | Build URL: ${env.BUILD_URL}")
}

// Set cron to build weekly for master, main or release, not other branches
String cron_str = BRANCH_NAME == "master" || BRANCH_NAME == "main" ? "0 7 * * 1" : ""
cron_str = BRANCH_NAME ==~ /^release\/.*/ ? "0 7 * * 1" : "${cron_str}"

pipeline {
    agent {
        dockerfile {
          filename 'DITA-Dockerfile'
          label 'dstbuild'
        }
      }

    triggers { cron(cron_str) }

    // Configuration options applicable to the entire job
    options {
        // This build should not take long, fail the build if it appears stuck
        timeout(time: 45, unit: 'MINUTES')

        // Don't fill up the build server with unnecessary cruft
        buildDiscarder(logRotator(numToKeepStr: '10'))

        // Add timestamps and color to console output, cuz pretty
        timestamps()
    }

    stages {
        // For debugging
        // stage('Creating Project specific variables - vars.groovy') {
        //     steps {
        //         sh """
        //             echo "Creating vars.groovy file"
        //             touch ${WORKSPACE}/dac-assets/vars.groovy
        //             touch ${WORKSPACE}/dac-assets/product_version
        //             touch ${WORKSPACE}/dac-assets/product_label
        //             pwd
        //             ls -la ${WORKSPACE}/dac-assets/
        //             echo "//vars.groovy for variables" > ${WORKSPACE}/dac-assets/vars.groovy
        //             cat ${WORKSPACE}/dac-assets/vars.groovy
        //         """
        //     }
        // }
        // stage('Write to vars.groovy and read contents') {
        //     steps {
        //         sh """
        //             echo "Calling custom-versioning - write to files"
        //             . ${WORKSPACE}/dac-assets/custom-versioning.sh
        //             echo "Check contents of vars.groovy"
        //             cat ${WORKSPACE}/dac-assets/vars.groovy
        //             cat ${WORKSPACE}/dac-assets/product_version
        //             cat ${WORKSPACE}/dac-assets/product_label
        //         """
        //     }
        // }
        // stage('Call setup_versioning') {
        //     environment {
        //         PROJECT_VARS = load "dac-assets/vars.groovy"
        //     }
        //     steps {
        //         sh """
        //                 echo "Check our variables"
        //                 env | sort -f
        //                 /bin/bash -x ./hpc-shastadocs-docs-as-code/setup_versioning.sh
        //         """
        //     }
        // }
        // stage("Env Variables and Versioning") {
        //     environment {
        //         CINAME = "Jenkins"
        //     }

        //     steps {
        //         script {
        //             env.VERSION = "${PRODUCT_VERSION}"
        //             env.VERSION_RPM = "${VERSION}"
        //             env.GIT_TAG = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
        //             env.BUILD_DATE = "${buildDate}"
        //             env.IMAGE_TAG = getDockerImageTag(version: "${VERSION}", buildDate: "${BUILD_DATE}", gitTag: "${GIT_TAG}")
        //             // Set project specific naming
        //             env.IMAGE_PREFIX = "${PRODUCT_LABEL}"
        //             env.PRODUCT_NAME = "${PRODUCT_LABEL}"
        //             env.IMAGE_NAME_PDFHTML = "${IMAGE_PREFIX}-pdfhtml-${IMAGE_TAG}"
        //             env.IMAGE_NAME_PDF = "${IMAGE_PREFIX}-pdf-${IMAGE_TAG}"
        //             env.IMAGE_NAME_HTML = "${IMAGE_PREFIX}-html-${IMAGE_TAG}"
        //             env.PRODUCT = "pubs"
        //             env.TARGET_OS = "noos"
        //             env.TARGET_ARCH = "noarch"
        //         }
        //     }
        // }
        stage('Print Build Info') {
            steps {
                printBuildInfo(pipelineParams)
                script {
                        echo "Print all Environment Variables"
                        sh "env | sort -f"
                    }
            }
        }
        stage('DITA_OT - install html plugin') {
            steps {
                sh "pwd && ls -la"
                sh "cp docs/portal/developer-portal/com.hpe.html5.common-master.zip ."
                sh "dita install com.hpe.html5.common-master.zip"
                sh """
                    dita install --help
                    """
                // sh "dita install com.hpe.html5.common-master.zip"
                script {
                        echo "Print all Environment Variables"
                        sh "env | sort -f"
                    }
            }
        }
        stage('Testing dita command to build output') {
            steps {
                sh "pwd"
                sh "mkdir -p docs/portal/developer-portal/build"
                sh "dita --input=./docs/portal/developer-portal/uan_install.ditamap --format=html5 --output=./docs/portal/developer-portal/build"
                sh "ls -la ./docs/portal/developer-portal/build/"
            }
        }
        stage('Testing dita command to build output - admin') {
            steps {
                sh "dita --input=./docs/portal/developer-portal/uan_admin.ditamap --format=html5 --output=./docs/portal/developer-portal/build"
                sh "ls -la ./docs/portal/developer-portal/build/"
            }
        }

        // stage('Spellcheck') {
        //     steps {
        //         sh """
        //             docker build -t basecontainer-${containerId_toss} --target build -f ${pipelineParams.dockerfileSpell} .
        //         """
        //     }
        // }

        stage('Preparing assets for artifactory') {
            // environment {
            //     BUILD_DATE = "${buildDate}"
            // }
            steps {
            // Build PDF HTML
            // echo "${BUILD_DATE}"
            sh """
                    pwd
                    mkdir -p ${WORKSPACE}/build/results/dita-ot-uan
                    cp -R ./docs/portal/developer-portal/build/* ${WORKSPACE}/build/results/dita-ot-uan
                    tar -cf ${WORKSPACE}/build/results/dita-ot-uan/dita-ot-uan.tar ${WORKSPACE}/build/results/dita-ot-uan
                    ls -la ${WORKSPACE}/build/results/dita-ot-uan
                """
            }
        }

        /*
        stage('Create RPM') {
            environment {
                VERSION = "${env.VERSION_RPM}"
            }
            steps {
            sh """
                if [[ -f ${pipelineParams.makeMakefile} ]]; then
                    ls -latr ${WORKSPACE}/build/results
                    cd portal/developer-portal;
                    cp  ${WORKSPACE}/build/results/${IMAGE_NAME_PDF} pdf -rf
                    cp  ${WORKSPACE}/build/results/${IMAGE_NAME_HTML} html -rf
                    make package
                    cp -r rpmbuild/RPMS/x86_64/*.rpm ${WORKSPACE}/build/results
                else
                    echo "${pipelineParams.makeMakefile} doesn't exist"
                    exit 1
                fi
                """
            }
        }
        */
        // stage('Transfer') {
        //     steps {
        //         script {
        //             if ( checkFileExists(filePath: "build/results/${PRODUCT_NAME}/*.tar") ) {
        //                 transfer(artifactName: "build/results/${PRODUCT_NAME}")
        //             }
        //             if ( checkFileExists(filePath: 'build/results/*.rpm') ) {
        //                 transfer(artifactName: "build/results/*.rpm")
        //             }
        //         }
        //     }
        // }
    }
    post('Post-build steps') {
        always {
            script {
                currentBuild.result = currentBuild.result == null ? "SUCCESS" : currentBuild.result
            }
            //findAndTransferArtifacts()
            logstashSend failBuild: false, maxLines: 3000
        }
        fixed {
            notifyBuildResult(headline: "FIXED")
            script {
                if ((pipelineParams.slackNotification[5] != false && skipSlack != true)) {
                    // Manually set the status to "FIXED" because it's not one of the accepted inputs for currentBuild.result
                    slackNotify(channel: "${pipelineParams.slackNotification[0]}", credential: "${pipelineParams.slackNotification[1]}", color: "good", message: "Finished: ${env.JOB_NAME} | Build URL: ${env.BUILD_URL} | Status: FIXED")
                }
                // Set to true so the 'success' post section is skipped when the build result is 'fixed'
                // Otherwise both 'fixed' and 'success' sections will execute due to Jenkins behavior
                skipSuccess = true
            }
        }
        failure {
            notifyBuildResult(headline: "FAILED")
            script {
                if ((pipelineParams.slackNotification[4] != false && skipSlack != true)) {
                    slackNotify(channel: "${pipelineParams.slackNotification[0]}", credential: "${pipelineParams.slackNotification[1]}", color: "danger", message: "Finished: ${env.JOB_NAME} | Build URL: ${env.BUILD_URL} | Status: ${currentBuild.result}")
                }
            }
        }
        success {
            script {
                if ((pipelineParams.slackNotification[3] != false && skipSlack != true && skipSuccess != true)) {
                    // Have to manually set the currentBuild.result var to 'SUCCESS' when the job is successful, otherwise it appears as 'null'
                    currentBuild.result = 'SUCCESS'
                    slackNotify(channel: "${pipelineParams.slackNotification[0]}", credential: "${pipelineParams.slackNotification[1]}", color: "good", message: "Finished: ${env.JOB_NAME} | Build URL: ${env.BUILD_URL} | Status: ${currentBuild.result}")
                }
            }
        }
    }
}

